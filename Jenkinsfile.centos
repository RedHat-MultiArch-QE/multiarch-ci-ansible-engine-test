properties([
  parameters([
    choiceParam(
      name: 'ARCH',
      choices: "x86_64\nppc64le\naarch64",
      description: 'Architecture'
    ),
    string(
      name: 'ORIGIN_REPO',
      description: 'Origin repo',
      defaultValue: 'https://github.com/openshift/origin.git'
    ),
    string(
      name: 'ORIGIN_BRANCH',
      description: 'Origin branch',
      defaultValue: 'master'
    ),
    string(
      name: 'OS_BUILD_ENV_IMAGE',
      description: 'openshift-release image',
      defaultValue: 'openshiftmultiarch/origin-release:golang-1.8'
    )
  ])
])

// Import the CentOS/cico-pipeline-library
//library identifier: "cico-pipeline-library@master",
//        retriever: modernSCM([$class: 'GitSCMSource',
//                              remote: "https://github.com/CentOS/cico-pipeline-library"])
//import org.centos.*

library identifier: "multiarch-openshift-ci@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/detiber/multiarch-openshift-ci"])

node("paas-sig-ci-slave01") {
  ansiColor('xterm') {
    timestamps {
      withEnv(["PROVISION_STAGE_NAME=provision", "DEPROVISION_STAGE_NAME=deprovision"]) {
        stage('pre') {
	  checkout(
	    changelog: true,
	    poll: true,
	    scm: [
	      $class: 'GitSCM',
	      branches: [[name: '*/${ORIGIN_BRANCH}']],
	      doGenerateSubmoduleConfigurations: false,
	      extensions: [
	        [
	          $class: 'PreBuildMerge',
		  options: [
		    fastForwardMode: 'FF',
		    mergeRemote: 'https://github.com/detiber/origin.git',
		    mergeStrategy: <object of type org.jenkinsci.plugins.gitclient.MergeCommand.Strategy>, mergeTarget: 'multiarch'
		  ]
                ],
                [
		  $class: 'RelativeTargetDirectory',
		  relativeTargetDir: 'origin'
		]
	      ],
              gitTool: 'Default',
	      submoduleCfg: [],
	      userRemoteConfigs: [[url: '${ORIGIN_REPO}']]
	    ]
	  )
	}
        withCiHost {
	  stage('prep') {
            remoteCommands([
  	      "yum install -y git",
  	      "git clone -b ${ORIGIN_BRANCH} ${ORIGIN_REPO}",
              "cp origin/images/source/cbs-paas7-openshift-multiarch-el7-build.repo /etc/yum.repos.d/",
  	      "yum install -y bc make golang docker jq bind-utils",
              "echo 'insecure_registries: [172.30.0.0/16]' >> /etc/containers/registries.conf",
              "systemctl enable docker",
              "systemctl start docker"
  	    ])
	  }
	}
      }
    }
  }
}
